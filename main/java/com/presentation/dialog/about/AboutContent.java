package com.presentation.dialog.about;

import com.presentation.dialog.DialogStyles;

import java.util.Arrays;
import java.util.List;

public final class AboutContent {

    private AboutContent() {}

    public static List<String> getProjectInfo() {
        return Arrays.asList(
                "Aplica√ß√£o Java completa com interface gr√°fica avan√ßada",
                "Demonstra√ß√£o de conceitos fundamentais de POO",
                "Integra√ß√£o de threads para anima√ß√µes din√¢micas",
                "Manipula√ß√£o segura de arquivos de texto",
                "Interface responsiva com componentes personalizados",
                "Projeto acad√™mico desenvolvido colaborativamente",
                "Implementa√ß√£o seguindo padr√µes de Clean Architecture",
                "Foco em usabilidade e experi√™ncia do usu√°rio"
        );
    }

    public static List<String> getObjectives() {
        return Arrays.asList(
                "Demonstrar mec√¢nica de ouvintes (ActionListener implementation)",
                "Implementar leitura e apresenta√ß√£o de arquivos de texto",
                "Criar anima√ß√µes din√¢micas usando threads separadas",
                "Desenvolver di√°logos personalizados com componentes Swing",
                "Integrar JFileChooser para manipula√ß√£o de arquivos",
                "Aplicar padr√µes de arquitetura orientada a objetos",
                "Implementar interface responsiva com m√∫ltiplos layouts",
                "Garantir separa√ß√£o adequada entre l√≥gica e apresenta√ß√£o",
                "Criar componentes reutiliz√°veis e extens√≠veis",
                "Demonstrar boas pr√°ticas de programa√ß√£o Java"
        );
    }

    public static FeatureGroup[] getFeatures() {
        return new FeatureGroup[]{
                new FeatureGroup("üìÅ Alt+A ARQUIVO:", DialogStyles.PRIMARY_COLOR, Arrays.asList(
                        "A - Abrir arquivo",
                        "F - Fechar arquivo",
                        "S - Sair da aplica√ß√£o"
                )),
                new FeatureGroup("üé® Alt+C CONFIGURA√á√ÉO:", DialogStyles.TECH_COLOR, Arrays.asList(
                        "P - Padr√µes de anima√ß√£o",
                        "O - Cores personalizadas",
                        "v - Velocidade das anima√ß√µes"
                )),
                new FeatureGroup("‚ùì Alt+J AJUDA:", DialogStyles.ACCENT_COLOR, Arrays.asList(
                        "A - Ajuda detalhada",
                        "S- Informa√ß√µes do projeto"
                )),
                new FeatureGroup("üñ•Ô∏è INTERFACE:", DialogStyles.INFO_COLOR, Arrays.asList(
                        "√Årea de conte√∫do com scroll autom√°tico",
                        "Fundo animado executado em thread separada",
                        "Barra de status com feedback em tempo real",
                        "Redimensionamento din√¢mico de componentes"
                ))
        };
    }

    public static TechnicalGroup[] getTechnicalSpecs() {
        return new TechnicalGroup[]{
                new TechnicalGroup("üñºÔ∏è Interface Gr√°fica:", Arrays.asList(
                        "JFrame principal com layout BorderLayout",
                        "JMenuBar customizada com atalhos Alt+A, Alt+C, Alt+J",
                        "JPanel personalizado para anima√ß√µes",
                        "JDialog modal para ajuda e configura√ß√µes",
                        "JScrollPane para conte√∫do de arquivos",
                        "JTextArea com quebra de linha autom√°tica"
                )),
                new TechnicalGroup("üîÑ Multithreading:", Arrays.asList(
                        "Thread separada para anima√ß√£o de fundo",
                        "EDT (Event Dispatch Thread) para interface",
                        "Sincroniza√ß√£o adequada entre threads",
                        "SwingUtilities.invokeLater() para updates de UI"
                )),
                new TechnicalGroup("üìÇ Manipula√ß√£o de Arquivos:", Arrays.asList(
                        "JFileChooser para sele√ß√£o de arquivos",
                        "Valida√ß√£o de tipos de arquivo suportados",
                        "Leitura segura com tratamento de exce√ß√µes",
                        "Suporte a arquivos .txt, .md, .log"
                )),
                new TechnicalGroup("‚ö° Eventos e Listeners:", Arrays.asList(
                        "ActionListener implementado internamente",
                        "MouseListener para intera√ß√µes customizadas",
                        "WindowListener para encerramento seguro",
                        "Padr√£o Observer para comunica√ß√£o entre componentes"
                ))
        };
    }

    public static TeamMember[] getTeamMembers() {
        return new TeamMember[]{
                new TeamMember("üñ•Ô∏è Interface Menu", "1 Desenvolvedor", DialogStyles.PRIMARY_COLOR, Arrays.asList(
                        "Cria√ß√£o da estrutura de menus (JMenuBar)",
                        "Implementa√ß√£o de ActionListeners",
                        "Defini√ß√£o de atalhos Alt+A, Alt+C, Alt+J",
                        "Integra√ß√£o com MenuController"
                )),
                new TeamMember("üé® Background & Anima√ß√£o", "2 Desenvolvedores", DialogStyles.ACCENT_COLOR, Arrays.asList(
                        "Desenvolvimento do painel animado personalizado",
                        "Implementa√ß√£o de threads para anima√ß√µes",
                        "Sistema de configura√ß√£o Alt+P, Alt+O, Ctrl+Shift+S",
                        "Otimiza√ß√£o de performance gr√°fica"
                )),
                new TeamMember("üìÅ L√≥gica de Arquivos", "2 Desenvolvedores", DialogStyles.INFO_COLOR, Arrays.asList(
                        "Integra√ß√£o com JFileChooser",
                        "Sistema de leitura Alt+A e fechamento Alt+F",
                        "Tratamento de exce√ß√µes de I/O",
                        "Interface de exibi√ß√£o de conte√∫do"
                )),
                new TeamMember("üìñ Ajuda & Documenta√ß√£o", "1 Desenvolvedor", DialogStyles.TECH_COLOR, Arrays.asList(
                        "Cria√ß√£o de di√°logos de ajuda Alt+A",
                        "Documenta√ß√£o t√©cnica do projeto",
                        "Sistema de informa√ß√µes sobre a aplica√ß√£o",
                        "Cria√ß√£o de constantes e textos padronizados"
                ))
        };
    }

    public static List<String> getEvaluationCriteria() {
        return Arrays.asList(
                "Entrega completa - Todos os requisitos funcionais implementados",
                "Metodologia padronizada - Processo de desenvolvimento estruturado",
                "C√≥digo em ingl√™s - Nomenclatura internacional seguida",
                "Arquitetura de classes - Design orientado a objetos bem estruturado",
                "Qualidade do c√≥digo - Boas pr√°ticas e padr√µes aplicados",
                "Execu√ß√£o multithread - Threads implementadas corretamente",
                "Elementos gr√°ficos - Interface rica e componentes din√¢micos",
                "Aspecto geral - Aplica√ß√£o polida e experi√™ncia profissional"
        );
    }

    public static class FeatureGroup {
        public final String title;
        public final java.awt.Color color;
        public final List<String> items;

        public FeatureGroup(String title, java.awt.Color color, List<String> items) {
            this.title = title;
            this.color = color;
            this.items = items;
        }
    }

    public static class TechnicalGroup {
        public final String title;
        public final List<String> items;

        public TechnicalGroup(String title, List<String> items) {
            this.title = title;
            this.items = items;
        }
    }

    public static class TeamMember {
        public final String role;
        public final String count;
        public final java.awt.Color color;
        public final List<String> responsibilities;

        public TeamMember(String role, String count, java.awt.Color color, List<String> responsibilities) {
            this.role = role;
            this.count = count;
            this.color = color;
            this.responsibilities = responsibilities;
        }
    }
}
